package merkle

//Spencer Romberg
//Assignment 2.2
//spencerromberg@live.com or sromberg@uwyo.edu

import (
	"encoding/hex"
	"fmt"

	"github.com/Univ-Wyo-Education/S20-4010/Assignments/02/hash"
	"github.com/pschlump/MiscLib"
	"github.com/pschlump/godebug"
)

func MerkleHash(data [][]byte) []byte {
	/*
	   ### Pseudo Code

	   1. Create a slice to hold the hashes of the leaves.  Each leaf hash is a `[]byte`.  So make the data type `[][]byte`.
	   	Make this slice of slice of byte then length of the data.  That would be `len(data)`.  Let's call this `hTmp`.
	   2. For each data block
	   	1. Calculate a hash for the data block using `hash.HashOf()`.
	   	2. Save this in the slice created in (1) above.
	   3. Create a `[][]byte` slice to hold the intermediate hashes in the tree.
	   	This will need to be no more than `len(data)/2+1` in length.  The plus 1 is so that 0 blocks of hashing or an odd
	   	number of blocks will have enough space.  Let's call this `hMid`.
	   4. Declare a variable `ln`, and set it to  `len(data)/2+1`
	   5. While `ln >= 1` (Hint: the language only has `for` loops with lots of different ways of doing it)
	   	1. For each pair of hashes (if you have an odd number just use the single hash)
	   		- Calculate the hash of the pair using `hash.Keccak256()`.  It takes a variable number of arguments so you can
	   		  pass 1 or 2 arguments to it.
	   		- Append this to `hMid`.
	   	2. Replace hTmp with hMid
	   	3. Recalculate `ln` set it to `len(hTmp)/2`
	   	4. Generate a new empty hMid of allocated space of `len(hTmp)/2`.
	   6. Return `hTmp[0]`
	*/

	hTmp := make([][]byte, len(data), len(data))
	// PJS for ii, data := range hTmp {
	// Iterate over the 'data' passed from above
	for ii, dd := range data {
		held := hash.HashOf(dd)
		hTmp[ii] = held
	}
	// PJS hMid := make([][]byte, (len(data)/(2+1)), (len(data)/(2+1)))
	// if you are going to use 'append' then start at 0 (2nd parameter)
	// if you are going to us a subscript then pre-allocate to the correct length.
	hMid := make([][]byte, 0, (len(data)/2 + 1))
	dumpHashes(hTmp) // I added this to see what the set of hashes is (debuging code)
	// PJS ln := len(data) / (2 + 1)
	// len(data)/(2+1) === len(data)/3 - probably not what you wanted.
	ln := len(hTmp)/2 + 1 // The +1 in this case gurantees that we go through the loop at least once
	for ln >= 1 {
		j := 0
		for i := 0; i < len(hTmp); i += 2 {
			fmt.Printf("\n%sTop: i=%d j=%d ln = %d%s\n", MiscLib.ColorYellow, i, j, ln, MiscLib.ColorReset)
			// PJS if (ln % 2) == 0 {
			// the "even"/"odd" check can be made to work but when it is "odd" we still process
			// all the pairs before we hash the last item.
			if i+1 < len(hTmp) {
				fmt.Printf("AT: %s\n", godebug.LF()) // debuging code - "godebug.LF()" returns out the current file and line number.
				hMidTransfer := hash.Keccak256(hTmp[i], hTmp[i+1])
				// hMid[j] = append(hMidTransfer)
				// append() first argument is the thing we are going to append from.
				hMid = append(hMid, hMidTransfer)
			} else {
				fmt.Printf("AT: %s\n", godebug.LF())
				hMidTransfer := hash.Keccak256(hTmp[i])
				// hMid[j] = append(hMidTransfer)
				hMid = append(hMid, hMidTransfer)
			}
			dumpHashes(hMid) // added to print out the intermediate hashes.
			j++
		}
		// PJS Moved to outer loop.
		hTmp = hMid
		// PJS ln = len(hTmp) / 2
		ln = len(hTmp) / 2
		// PJS hMid = make([][]byte, (len(hTmp)/2), (len(hTmp)/2))
		hMid = make([][]byte, 0, (len(hTmp)/2)+1)
	}
	return hTmp[0]
}

func dumpHashes(hs [][]byte) {
	for kk, h := range hs {
		hStr := hex.EncodeToString(h)
		fmt.Printf("hs[%d] = %s, at:%s\n", kk, hStr, godebug.LF(2))
	}
}
